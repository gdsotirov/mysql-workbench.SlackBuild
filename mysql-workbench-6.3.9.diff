# Patch for 6.3.9 to correct compilation errors in library/base/jsonparser.cpp
# Copyright (C) 2017 Georgi D. Sotirov <gdsotirov@dir.bg>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
# $Id: mysql-workbench-6.3.9.diff,v 1.1 2017/02/10 08:59:13 gsotirov Exp $
#
diff -urNad mysql-workbench-community-6.3.9-src-orig/library/base/jsonparser.cpp mysql-workbench-community-6.3.9-src/library/base/jsonparser.cpp
--- mysql-workbench-community-6.3.9-src-orig/library/base/jsonparser.cpp	2017-02-03 20:40:18.000000000 +0200
+++ mysql-workbench-community-6.3.9-src/library/base/jsonparser.cpp	2017-02-10 10:35:12.193163967 +0200
@@ -343,7 +343,7 @@
    */
   JsonValue &JsonArray::at(SizeType pos) {
     if (pos > _data.size())
-      throw std::out_of_range(base::strfmt("Index '%lu' is out of range.", pos));
+      throw std::out_of_range(base::strfmt("Index '%zu' is out of range.", pos));
     return _data.at(pos);
   }
 
@@ -358,7 +358,7 @@
    */
   const JsonValue &JsonArray::at(SizeType pos) const {
     if (pos > _data.size())
-      throw std::out_of_range(base::strfmt("Index '%lu' is out of range.", pos));
+      throw std::out_of_range(base::strfmt("Index '%zu' is out of range.", pos));
     return _data.at(pos);
   }
 
@@ -1669,10 +1669,10 @@
         _output += std::to_string((double)value);
         break;
       case VInt64:
-        _output += std::to_string((int64_t)value);
+        _output += std::to_string((ssize_t)value);
         break;
       case VUint64:
-        _output += std::to_string((uint64_t)value);
+        _output += std::to_string((size_t)value);
         break;
       case VObject:
         write((JsonObject)value);
