# Patch for 6.3.9 to correct compilation errors on 32 bit systems
# See https://bugs.mysql.com/bug.php?id=84951
# See https://bugs.mysql.com/bug.php?id=84886
# See https://github.com/mysql/mysql-workbench/pull/14/commits/fff08d9ec68de8215fc8f12fe0ee42e598e1cf75
#
# $Id: mysql-workbench-6.3.9.diff,v 1.3 2017/02/14 19:24:42 gsotirov Exp $
#
diff -urNad mysql-workbench-community-6.3.9-src-orig/library/base/jsonparser.cpp mysql-workbench-community-6.3.9-src/library/base/jsonparser.cpp
--- mysql-workbench-community-6.3.9-src-orig/library/base/jsonparser.cpp	2017-02-03 20:40:18.000000000 +0200
+++ mysql-workbench-community-6.3.9-src/library/base/jsonparser.cpp	2017-02-14 21:17:08.531245396 +0200
@@ -343,7 +343,7 @@
    */
   JsonValue &JsonArray::at(SizeType pos) {
     if (pos > _data.size())
-      throw std::out_of_range(base::strfmt("Index '%lu' is out of range.", pos));
+      throw std::out_of_range(base::strfmt("Index '%zu' is out of range.", pos));
     return _data.at(pos);
   }
 
@@ -358,7 +358,7 @@
    */
   const JsonValue &JsonArray::at(SizeType pos) const {
     if (pos > _data.size())
-      throw std::out_of_range(base::strfmt("Index '%lu' is out of range.", pos));
+      throw std::out_of_range(base::strfmt("Index '%zu' is out of range.", pos));
     return _data.at(pos);
   }
 
@@ -1668,12 +1668,14 @@
       case VDouble:
         _output += std::to_string((double)value);
         break;
+#ifdef DEFINE_UINT64_T_FUNCTIONS
       case VInt64:
         _output += std::to_string((int64_t)value);
         break;
       case VUint64:
         _output += std::to_string((uint64_t)value);
         break;
+#endif
       case VObject:
         write((JsonObject)value);
         break;
diff -urNad mysql-workbench-community-6.3.9-src-orig/library/forms/jsonview.cpp mysql-workbench-community-6.3.9-src/library/forms/jsonview.cpp
--- mysql-workbench-community-6.3.9-src-orig/library/forms/jsonview.cpp	2017-02-03 20:40:18.000000000 +0200
+++ mysql-workbench-community-6.3.9-src/library/forms/jsonview.cpp	2017-02-14 21:17:08.532245311 +0200
@@ -651,8 +651,10 @@
   if (data != nullptr) {
     std::stringstream buffer;
     double number = 0;
+#ifdef DEFINE_UINT64_T_FUNCTIONS
     int64_t number2 = 0;
     uint64_t number3 = 0;
+#endif
     bool retBool = false;
     auto &storedValue = data->getData();
     switch (storedValue.getType()) {
@@ -664,6 +666,7 @@
         storedValue = number;
         setData = true;
         break;
+#ifdef DEFINE_UINT64_T_FUNCTIONS
       case VInt64:
         if (!base::is_number(value))
           break;
@@ -680,6 +683,7 @@
         storedValue = number3;
         setData = true;
         break;
+#endif
       case VBoolean:
         if (!base::isBool(value))
           break;
@@ -1073,6 +1077,7 @@
       node->set_string(1, std::to_string((double)value));
       node->set_string(2, "Double");
       break;
+#ifdef DEFINE_UINT64_T_FUNCTIONS
     case VInt64:
       node->set_string(1, std::to_string((int64_t)value));
       node->set_string(2, "Long Integer");
@@ -1081,6 +1086,7 @@
       node->set_string(1, std::to_string((uint64_t)value));
       node->set_string(2, "Unsigned Long Integer");
       break;
+#endif
     default:
       break;
   }
@@ -1322,8 +1328,10 @@
   if (data != NULL) {
     std::stringstream buffer;
     double number = 0;
+#ifdef DEFINE_UINT64_T_FUNCTIONS
     int64_t number2 = 0;
     uint64_t number3 = 0;
+#endif
     bool retBool = false;
     switch (storedValue.getType()) {
       case VDouble:
@@ -1334,6 +1342,7 @@
         storedValue = number;
         node->set_float(column, number);
         _dataChanged(false);
+#ifdef DEFINE_UINT64_T_FUNCTIONS
       case VInt64:
         if (!base::is_number(value))
           break;
@@ -1352,6 +1361,7 @@
         node->set_float(column, (double)number3);
         _dataChanged(false);
         break;
+#endif
       case VBoolean:
         if (!base::isBool(value))
           break;
@@ -1611,12 +1621,14 @@
     case VDouble:
       node->set_float(columnId, (double)value);
       break;
+#ifdef DEFINE_UINT64_T_FUNCTIONS
     case VInt64:
       node->set_long(columnId, (int64_t)value);
       break;
     case VUint64:
       node->set_long(columnId, (uint64_t)value);
       break;
+#endif
     default:
       break;
   }
